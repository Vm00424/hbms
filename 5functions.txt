@Override
	public List<Hotel> getHotelList() throws HbmsException {
		// TODO Auto-generated method stub
		Connection connection = DBConnection.getConnection();
		List<Hotel> hotelList=new ArrayList<Hotel>();
		int hotelCount=0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection
					.prepareStatement(QueryMapper.GET_HOTEL_LIST);
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				Hotel hotel = new Hotel();
				hotel.setHotelId(resultSet.getInt(1));
				hotel.setCity(resultSet.getString(2));
				hotel.setHotelName(resultSet.getString(3));
				hotel.setAddress(resultSet.getString(4));
				hotel.setDescription(resultSet.getString(5));
				hotel.setAvgRatePerNight(resultSet.getDouble(6));
				hotel.setPhoneNoOne(resultSet.getString(7));
				hotel.setPhoneNoTwo(resultSet.getString(8));
				hotel.setRating(resultSet.getString(9));
				hotel.setEmail(resultSet.getString(10));
				hotel.setFax(resultSet.getString(11));
				hotelCount++;
				
				
			}
		} catch (SQLException sqlException) {
			logger.error(sqlException.getMessage());
			throw new HbmsException("Technical problem occured. Refer Log....");

		}finally{
			try {
				resultSet.close();
				preparedStatement.close();
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e.getMessage());
				throw new HbmsException("Error !!! in closing DBConnection ....");
			}
			
		}
		if(hotelCount==0){
			return null;
		}else{
			return hotelList;
		}
	}

	@Override
	public List<BookingDetail> getBookingList(User user) throws HbmsException {
		Connection connection = DBConnection.getConnection();
		List<BookingDetail> bookingList=new ArrayList<BookingDetail>();
		int bookingCount=0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection
					.prepareStatement(QueryMapper.GET_BOOKING_LIST);
			preparedStatement.setInt(1, user.getUserId());
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				BookingDetail bookingDetails = new BookingDetail();
				bookingDetails.setBookingId(resultSet.getInt(1));
				bookingDetails.setRoomId(resultSet.getInt(2));
				bookingDetails.setUserId(resultSet.getInt(3));
				bookingDetails.setBookedFrom(resultSet.getDate(4));
				bookingDetails.setBookedTo(resultSet.getDate(5));
				bookingDetails.setNoOfAdults(resultSet.getInt(6));
				bookingDetails.setNoOfChildren(resultSet.getInt(7));
				bookingDetails.setAmount(resultSet.getDouble(8));
				bookingCount++;
				
				
			}
		} catch (SQLException sqlException) {
			logger.error(sqlException.getMessage());
			throw new HbmsException("Technical problem occured. Refer Log....");

		}finally{
			try {
				resultSet.close();
				preparedStatement.close();
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e.getMessage());
				throw new HbmsException("Error !!! in closing DBConnection ....");
			}
			
		}
		if(bookingCount==0){
			return null;
		}else{
			return bookingList;
		}
	}
@Override
	public Hotel getHotel(Integer hotelId) throws HbmsException {
		// TODO Auto-generated method stub
		Connection connection = DBConnection.getConnection();
		Hotel hotel= new Hotel();
		Integer hotelCount=0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection
					.prepareStatement(QueryMapper.GET_HOTEL);
			preparedStatement.setInt(1, hotelId);
			resultSet = preparedStatement.executeQuery();
			
			if(resultSet!=null){
				hotel.setHotelId(resultSet.getInt(1));
				hotel.setCity(resultSet.getString(2));
				hotel.setHotelName(resultSet.getString(3));
				hotel.setAddress(resultSet.getString(4));
				hotel.setDescription(resultSet.getString(5));
				hotel.setAvgRatePerNight(resultSet.getDouble(6));
				hotel.setPhoneNoOne(resultSet.getString(7));
				hotel.setPhoneNoTwo(resultSet.getString(8));
				hotel.setRating(resultSet.getString(9));
				hotel.setEmail(resultSet.getString(10));
				hotel.setFax(resultSet.getString(11));				
				hotelCount=1;
			}
		} catch (SQLException sqlException) {
			logger.error(sqlException.getMessage());
			throw new HbmsException("Technical problem occured. Refer Log....");

		}finally{
			try {
				resultSet.close();
				preparedStatement.close();
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e.getMessage());
				throw new HbmsException("Error !!! in closing DBConnection ....");
			}
			
		}
		if(hotelCount==0){
			return null;
		}else{
			return hotel;
		}
	}
@Override
	public RoomDetail getRoom(Integer roomId) throws HbmsException {
		// TODO Auto-generated method stub
		Connection connection = DBConnection.getConnection();
		RoomDetail roomDetail= new RoomDetail();
		Integer roomCount=0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection
					.prepareStatement(QueryMapper.GET_ROOM);
			preparedStatement.setInt(1, roomId);
			resultSet = preparedStatement.executeQuery();
			
			if(resultSet!=null){
				roomDetail.setRoomId(resultSet.getInt(1));
				roomDetail.setHotelId(resultSet.getInt(2));
				roomDetail.setRoomNo(resultSet.getString(3));
				roomDetail.setRoomType(resultSet.getString(4));
				roomDetail.setPerNightRate(resultSet.getDouble(5));
				roomDetail.setAvailability(resultSet.getString(6));		
				roomCount=1;
			}
		} catch (SQLException sqlException) {
			logger.error(sqlException.getMessage());
			throw new HbmsException("Technical problem occured. Refer Log....");

		}finally{
			try {
				resultSet.close();
				preparedStatement.close();
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e.getMessage());
				throw new HbmsException("Error !!! in closing DBConnection ....");
			}
			
		}
		if(roomCount==0){
			return null;
		}else{
			return roomDetail;
		}
	}
@Override
	public List<BookingDetail> getBookingDetails(Hotel hotel)
			throws HbmsException {
		// TODO Auto-generated method stub
		Connection connection = DBConnection.getConnection();
		List<BookingDetail> bookingList=new ArrayList<BookingDetail>();
		int bookingCount=0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection
					.prepareStatement(QueryMapper.GET_BOOKING_BY_HOTEL);
			preparedStatement.setInt(1, hotel.getHotelId());
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				BookingDetail bookingDetails = new BookingDetail();
				bookingDetails.setBookingId(resultSet.getInt(1));
				bookingDetails.setRoomId(resultSet.getInt(2));
				bookingDetails.setUserId(resultSet.getInt(3));
				bookingDetails.setBookedFrom(resultSet.getDate(4));
				bookingDetails.setBookedTo(resultSet.getDate(5));
				bookingDetails.setNoOfAdults(resultSet.getInt(6));
				bookingDetails.setNoOfChildren(resultSet.getInt(7));
				bookingDetails.setAmount(resultSet.getDouble(8));
				bookingCount++;
				
				
			}
		} catch (SQLException sqlException) {
			logger.error(sqlException.getMessage());
			throw new HbmsException("Technical problem occured. Refer Log....");

		}finally{
			try {
				resultSet.close();
				preparedStatement.close();
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e.getMessage());
				throw new HbmsException("Error !!! in closing DBConnection ....");
			}
			
		}
		if(bookingCount==0){
			return null;
		}else{
			return bookingList;
		}
	}
